import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
TOKEN =("7909793879:AAHTSt1EtVXzDdR5JHTToqfyunhhp_DxIs4")  # –¢–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
OPERATOR_CHAT_ID = os.getenv("OPERATOR_CHAT_ID")  # ID —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class VisaForm(StatesGroup):
    citizenship = State()
    oman_visa = State()
    visa_expiry = State()
    departure_date = State()
    location = State()
    visa_type = State()
    people_count = State()
    car_choice = State()
    confirmation = State()

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É?", reply_markup=keyboard)

# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@dp.message_handler(lambda message: message.text == "–û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É")
async def ask_citizenship(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–ö–∏—Ä–≥–∏–∑—Å—Ç–∞–Ω", "–î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:", reply_markup=keyboard)
    await VisaForm.citizenship.set()

@dp.message_handler(state=VisaForm.citizenship)
async def ask_oman_visa(message: types.Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    await message.answer("–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –≤–∏–∑–∞ –≤ –û–º–∞–Ω? (190 —Ä—É–±)", reply_markup=keyboard)
    await VisaForm.oman_visa.set()

@dp.message_handler(state=VisaForm.oman_visa)
async def ask_visa_expiry(message: types.Message, state: FSMContext):
    await state.update_data(oman_visa=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –≤–∏–∑—ã (–¥–¥-–º–º-–≥–≥–≥–≥):")
    await VisaForm.visa_expiry.set()

@dp.message_handler(state=VisaForm.visa_expiry)
async def ask_departure_date(message: types.Message, state: FSMContext):
    await state.update_data(visa_expiry=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–¥-–º–º-–≥–≥–≥–≥):")
    await VisaForm.departure_date.set()

@dp.message_handler(state=VisaForm.departure_date)
async def ask_location(message: types.Message, state: FSMContext):
    await state.update_data(departure_date=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î—É–±–∞–π", "–ê–±—É-–î–∞–±–∏", "–®–∞—Ä–¥–∂–∞", "–î—Ä—É–≥–æ–π")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)
    await VisaForm.location.set()

@dp.message_handler(state=VisaForm.location)
async def ask_visa_type(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("30 –¥–Ω–µ–π", "60 –¥–Ω–µ–π", "90 –¥–Ω–µ–π", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ 30 –±–µ–∑ –≤—ã–µ–∑–¥–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—ã:", reply_markup=keyboard)
    await VisaForm.visa_type.set()

@dp.message_handler(state=VisaForm.visa_type)
async def ask_people_count(message: types.Message, state: FSMContext):
    await state.update_data(visa_type=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫?")
    await VisaForm.people_count.set()

@dp.message_handler(state=VisaForm.people_count)
async def ask_car_choice(message: types.Message, state: FSMContext):
    await state.update_data(people_count=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ú–µ—Ä—Å–µ–¥–µ—Å - 5000 —Ä—É–±", "–ö–∞–º—Ä–∏ - 3000 —Ä—É–±", "–ê–≤—Ç–æ–±—É—Å - 1500 —Ä—É–±")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–µ–∑–¥–∫–∏:", reply_markup=keyboard)
    await VisaForm.car_choice.set()

@dp.message_handler(state=VisaForm.car_choice)
async def confirm_booking(message: types.Message, state: FSMContext):
    await state.update_data(car_choice=message.text)
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    lead_info = f"""
üöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—ã:

üåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {data['citizenship']}
üõÇ –í–∏–∑–∞ –≤ –û–º–∞–Ω: {data['oman_visa']}
üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∏–∑—ã: {data['visa_expiry']}
üìÜ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {data['departure_date']}
üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}
üìù –¢–∏–ø –≤–∏–∑—ã: {data['visa_type']}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {data['people_count']}
üöó –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data['car_choice']}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!
"""
    await bot.send_message(OPERATOR_CHAT_ID, lead_info)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å.", reply_markup=keyboard)
    await VisaForm.confirmation.set()

@dp.message_handler(state=VisaForm.confirmation)
async def send_whatsapp_group(message: types.Message, state: FSMContext):
    await message.answer("–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ WhatsApp-–≥—Ä—É–ø–ø—É: https://wa.me/123456789")
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())